
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down
to the next componenents
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }

  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }

  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }

  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = [];
    results.push(this.state.addMovieText);
    this.setState({ movies: results });
  }

  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i++) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      return this.setState({ movies: movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsImhhbmRsZVN1Ym1pdFNlYXJjaCIsImkiLCJsZW5ndGgiLCJjdXJyZW50TW92aWUiLCJ0aXRsZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJhbGVydCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7Ozs7Ozs7O0FBYUEsT0FBT0EsTUFBUCxNQUFtQixpQkFBbkI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixlQUFyQjtBQUNBLE1BQU1DLEdBQU4sU0FBa0JDLE1BQU1DLFNBQXhCLENBQWtDO0FBQ2hDQyxjQUFZQyxLQUFaLEVBQW1CO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWFQsY0FBUUEsTUFERztBQUVYVSxzQkFBZ0IsRUFGTDtBQUdYQyxvQkFBYztBQUhILEtBQWI7QUFLQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkMsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkQsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLEtBQUtOLEtBQXRCO0FBQ0Q7O0FBRURPLGVBQWFDLEtBQWIsRUFBb0I7QUFDbEIsU0FBS0MsUUFBTCxDQUFjLEVBQUVSLGdCQUFnQk8sTUFBTUUsTUFBTixDQUFhQyxLQUEvQixFQUFkO0FBQ0Q7O0FBRURSLHVCQUFxQkssS0FBckIsRUFBNEI7QUFDMUIsU0FBS0MsUUFBTCxDQUFjLEVBQUVQLGNBQWNNLE1BQU1FLE1BQU4sQ0FBYUMsS0FBN0IsRUFBZDtBQUNEOztBQUVETix5QkFBdUI7QUFBSTtBQUN6QixRQUFJTyxVQUFVLEVBQWQ7QUFDQUEsWUFBUUMsSUFBUixDQUFhLEtBQUtiLEtBQUwsQ0FBV0UsWUFBeEI7QUFDQSxTQUFLTyxRQUFMLENBQWMsRUFBRWxCLFFBQVFxQixPQUFWLEVBQWQ7QUFDRDs7QUFFREUsdUJBQXFCO0FBQ25CLFFBQUlGLFVBQVUsRUFBZDtBQUNBLFNBQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtmLEtBQUwsQ0FBV1QsTUFBWCxDQUFrQnlCLE1BQXRDLEVBQThDRCxHQUE5QyxFQUFtRDtBQUNqRCxVQUFJRSxlQUFlLEtBQUtqQixLQUFMLENBQVdULE1BQVgsQ0FBa0J3QixDQUFsQixDQUFuQjtBQUNBLFVBQUlFLGFBQWFDLEtBQWIsQ0FBbUJDLFdBQW5CLEdBQWlDQyxRQUFqQyxDQUEwQyxLQUFLcEIsS0FBTCxDQUFXQyxjQUFYLENBQTBCa0IsV0FBMUIsRUFBMUMsQ0FBSixFQUF3RjtBQUN0RlAsZ0JBQVFDLElBQVIsQ0FBYUksWUFBYjtBQUNEO0FBQ0Y7QUFDRCxRQUFJTCxRQUFRSSxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCSyxZQUFNLHdCQUFOO0FBQ0EsYUFBTyxLQUFLWixRQUFMLENBQWMsRUFBRWxCLFFBQVFBLE1BQVYsRUFBZCxDQUFQO0FBQ0Q7QUFDRCxTQUFLa0IsUUFBTCxDQUFjLEVBQUVsQixRQUFRcUIsT0FBVixFQUFkO0FBQ0Q7QUFDRDs7Ozs7QUFLQVUsV0FBUztBQUNQLFdBQ1E7QUFBQTtBQUFBO0FBQ0k7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQURKO0FBR0ksMEJBQUMsU0FBRCxJQUFXLGdCQUFnQixLQUFLdEIsS0FBTCxDQUFXQyxjQUF0QyxFQUFzRCxvQkFBb0IsS0FBS2Esa0JBQUwsQ0FBd0JWLElBQXhCLENBQTZCLElBQTdCLENBQTFFLEVBQThHLGNBQWMsS0FBS0csWUFBTCxDQUFrQkgsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBNUgsR0FISjtBQUlJLDBCQUFDLFNBQUQsSUFBVyxRQUFRLEtBQUtKLEtBQUwsQ0FBV1QsTUFBOUI7QUFKSixLQURSO0FBUUQ7QUF2RCtCOztBQTBEbEMsZUFBZUksR0FBZjtBQUNBIiwiZmlsZSI6IkFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLypcbndoZXJlIGNvbXBvbmVudHMgc3RhcnRcbmNvbnN0cnVjdG9yIHNldHMgdXAgYXBwIHdpdGggd2hhdGV2ZXIgcHJvcHMgYXJlIHBhc3NlZCBkb3duXG5zdGF0ZSBnb2VzIGluc2lkZSBjb25zdHJ1Y3RvclxuY29uc3RydWN0b3Ivc3VwZXIgLSBpZiB5b3UgcGFzcyBwcm9wcyBpbnNpZGUgY29uc3RydXRvciBjYWxsLCBpdCBwYXNzZXMgaXQgZG93blxudG8gdGhlIG5leHQgY29tcG9uZW5lbnRzXG50aGlzLnN0YXRlID0gb2JqZWN0IGFsd2F5cyB3aXRoIGtleSB2YWwgcGFpclxubW9yZSB0aGFuIDEgbGluZSBvZiBjb2RlIHVzZSBwYXJlbnRoZXNlcyBmb3IganN4IGV4Ly4gbGluZSAyMVxuIC8vIHByb3BzIHdoYXQgeW91IHBhc3MgaW4gZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVtZW50IChpbmRleC5qcylcbi8vY2FuIGJpbmQgaW4gY29uc3RydWN0b3Igb3IgYmVsb3cgaW4gcmVuZGVyXG5cbiovXG5cbmltcG9ydCBtb3ZpZXMgZnJvbSAnLi4vbW92aWVEYXRhLmpzJztcbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSAnLi9Nb3ZpZUxpc3QuanMnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL1NlYXJjaEJhci5qcyc7XG5pbXBvcnQgQWRkTW92aWUgZnJvbSAnLi9BZGRNb3ZpZS5qcyc7XG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW92aWVzOiBtb3ZpZXMsXG4gICAgICBzZWFyY2hVc2VyVGV4dDogJycsXG4gICAgICBhZGRNb3ZpZVRleHQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZSA9IHRoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0ID0gdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hVc2VyVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQWRkTW92aWVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWRkTW92aWVUZXh0OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCgpIHsgICAvL3N0YXRlIGlzIGN1cnJlbnRseSBudWxsIG5lZWQgdG8gZml4XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICByZXN1bHRzLnB1c2godGhpcy5zdGF0ZS5hZGRNb3ZpZVRleHQpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3ZpZXM6IHJlc3VsdHMgfSk7XG4gIH1cblxuICBoYW5kbGVTdWJtaXRTZWFyY2goKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhdGUubW92aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY3VycmVudE1vdmllID0gdGhpcy5zdGF0ZS5tb3ZpZXNbaV07XG4gICAgICBpZiAoY3VycmVudE1vdmllLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5zdGF0ZS5zZWFyY2hVc2VyVGV4dC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goY3VycmVudE1vdmllKTtcbiAgICAgIH0gIFxuICAgIH1cbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGFsZXJ0KCdTb3JyeSwgdGl0bGUgbm90IGZvdW5kJyk7XG4gICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7IG1vdmllczogbW92aWVzIH0pOyBcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdmllczogcmVzdWx0cyB9KTtcbiAgfVxuICAvKlxuc2V0IGEgdmFyaWFibGUgZm9yIGZvdW5kIG1vdmllc1xuaWYgdGhlIHRleHQgYm94IHZhbHVlIHRoYXQgdGhlIHVzZXIgc3VibWl0cyBpcyBpbmNsdWRlZCBpbiB0aGUgbW92aWUgbGlzdCwgcmV0dXJuIHRoZSBsaXN0IHdpdGggdGhlIHRpdHRsZXMgbWF0Y2hpbmdcbiovXG4gIFxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPk1vdmllIExpc3Q8L2gxPlxuICAgICAgICAgICAgICAgIHsvKiA8QWRkTW92aWUgYWRkTW92aWVUZXh0ID0ge3RoaXMuc3RhdGUuYWRkTW92aWVUZXh0fSBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHt0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0fSBoYW5kbGVBZGRNb3ZpZUNoYW5nZSA9e3RoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2V9PjwvQWRkTW92aWU+ICovfVxuICAgICAgICAgICAgICAgIDxTZWFyY2hCYXIgc2VhcmNoVXNlclRleHQ9e3RoaXMuc3RhdGUuc2VhcmNoVXNlclRleHR9IGhhbmRsZVN1Ym1pdFNlYXJjaD17dGhpcy5oYW5kbGVTdWJtaXRTZWFyY2guYmluZCh0aGlzKX0gaGFuZGxlQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfSAvPlxuICAgICAgICAgICAgICAgIDxNb3ZpZUxpc3QgbW92aWVzPXt0aGlzLnN0YXRlLm1vdmllc30vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbi8vaWYgaXQgaXMgYSBtZXRob2Qgb24gdGhpcywgdGhlbiB0aGUgc2VhcmNoIGlzIHRoZSBjb21wb25lbnQsIHRoaXMgaXMgdGhlIGFwcCBjb21wb25lbWVudCAiXX0=