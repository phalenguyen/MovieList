
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down
to the next componenents
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }

  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }

  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }

  // addMovieText = 'good will hunting' 
  // {title: 'mean girls'}

  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = this.state.movies;
    results.push({ title: this.state.addMovieText });
    this.setState({ movies: results });
    this.state.addMovieText = '';
    //AddMovie-clearform
    console.log(this.state.movies);
  }

  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i += 1) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      return this.setState({ movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(AddMovie, { addMovieText: this.state.addMovieText, handleAddMovieSubmit: this.handleAddMovieSubmit, handleAddMovieChange: this.handleAddMovieChange }),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsInRpdGxlIiwiY29uc29sZSIsImxvZyIsImhhbmRsZVN1Ym1pdFNlYXJjaCIsImkiLCJsZW5ndGgiLCJjdXJyZW50TW92aWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiYWxlcnQiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7Ozs7Ozs7OztBQWFBLE9BQU9BLE1BQVAsTUFBbUIsaUJBQW5CO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixnQkFBdEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZUFBckI7O0FBRUEsTUFBTUMsR0FBTixTQUFrQkMsTUFBTUMsU0FBeEIsQ0FBa0M7QUFDaENDLGNBQVlDLEtBQVosRUFBbUI7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYVCxjQUFRQSxNQURHO0FBRVhVLHNCQUFnQixFQUZMO0FBR1hDLG9CQUFjO0FBSEgsS0FBYjtBQUtBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCRCxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtFLFNBQUwsR0FBaUIsS0FBS04sS0FBdEI7QUFDRDs7QUFFRE8sZUFBYUMsS0FBYixFQUFvQjtBQUNsQixTQUFLQyxRQUFMLENBQWMsRUFBRVIsZ0JBQWdCTyxNQUFNRSxNQUFOLENBQWFDLEtBQS9CLEVBQWQ7QUFDRDs7QUFFRFIsdUJBQXFCSyxLQUFyQixFQUE0QjtBQUMxQixTQUFLQyxRQUFMLENBQWMsRUFBRVAsY0FBY00sTUFBTUUsTUFBTixDQUFhQyxLQUE3QixFQUFkO0FBQ0Q7O0FBRUQ7QUFDQTs7QUFFQU4seUJBQXVCO0FBQUk7QUFDekIsUUFBSU8sVUFBVSxLQUFLWixLQUFMLENBQVdULE1BQXpCO0FBQ0FxQixZQUFRQyxJQUFSLENBQWEsRUFBQ0MsT0FBTyxLQUFLZCxLQUFMLENBQVdFLFlBQW5CLEVBQWI7QUFDQSxTQUFLTyxRQUFMLENBQWMsRUFBRWxCLFFBQVFxQixPQUFWLEVBQWQ7QUFDQSxTQUFLWixLQUFMLENBQVdFLFlBQVgsR0FBMEIsRUFBMUI7QUFDQTtBQUNBYSxZQUFRQyxHQUFSLENBQVksS0FBS2hCLEtBQUwsQ0FBV1QsTUFBdkI7QUFDRDs7QUFFRDBCLHVCQUFxQjtBQUNuQixRQUFJTCxVQUFVLEVBQWQ7QUFDQSxTQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLbEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCNEIsTUFBdEMsRUFBOENELEtBQUssQ0FBbkQsRUFBc0Q7QUFDcEQsVUFBSUUsZUFBZSxLQUFLcEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCMkIsQ0FBbEIsQ0FBbkI7QUFDQSxVQUFJRSxhQUFhTixLQUFiLENBQW1CTyxXQUFuQixHQUFpQ0MsUUFBakMsQ0FBMEMsS0FBS3RCLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQm9CLFdBQTFCLEVBQTFDLENBQUosRUFBd0Y7QUFDdEZULGdCQUFRQyxJQUFSLENBQWFPLFlBQWI7QUFDRDtBQUNGO0FBQ0QsUUFBSVIsUUFBUU8sTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QkksWUFBTSx3QkFBTjtBQUNBLGFBQU8sS0FBS2QsUUFBTCxDQUFjLEVBQUVsQixNQUFGLEVBQWQsQ0FBUDtBQUNEO0FBQ0QsU0FBS2tCLFFBQUwsQ0FBYyxFQUFFbEIsUUFBUXFCLE9BQVYsRUFBZDtBQUNEO0FBQ0Q7Ozs7O0FBS0FZLFdBQVM7QUFDUCxXQUNJO0FBQUE7QUFBQTtBQUNJO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FESjtBQUVJLDBCQUFDLFFBQUQsSUFBVSxjQUFnQixLQUFLeEIsS0FBTCxDQUFXRSxZQUFyQyxFQUFtRCxzQkFBd0IsS0FBS0csb0JBQWhGLEVBQXNHLHNCQUF1QixLQUFLRixvQkFBbEksR0FGSjtBQUdJLDBCQUFDLFNBQUQsSUFBVyxnQkFBZ0IsS0FBS0gsS0FBTCxDQUFXQyxjQUF0QyxFQUFzRCxvQkFBb0IsS0FBS2dCLGtCQUFMLENBQXdCYixJQUF4QixDQUE2QixJQUE3QixDQUExRSxFQUE4RyxjQUFjLEtBQUtHLFlBQUwsQ0FBa0JILElBQWxCLENBQXVCLElBQXZCLENBQTVILEdBSEo7QUFJSSwwQkFBQyxTQUFELElBQVcsUUFBUSxLQUFLSixLQUFMLENBQVdULE1BQTlCO0FBSkosS0FESjtBQVFEO0FBN0QrQjs7QUFnRWxDLGVBQWVJLEdBQWY7QUFDQSIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG53aGVyZSBjb21wb25lbnRzIHN0YXJ0XG5jb25zdHJ1Y3RvciBzZXRzIHVwIGFwcCB3aXRoIHdoYXRldmVyIHByb3BzIGFyZSBwYXNzZWQgZG93blxuc3RhdGUgZ29lcyBpbnNpZGUgY29uc3RydWN0b3JcbmNvbnN0cnVjdG9yL3N1cGVyIC0gaWYgeW91IHBhc3MgcHJvcHMgaW5zaWRlIGNvbnN0cnV0b3IgY2FsbCwgaXQgcGFzc2VzIGl0IGRvd25cbnRvIHRoZSBuZXh0IGNvbXBvbmVuZW50c1xudGhpcy5zdGF0ZSA9IG9iamVjdCBhbHdheXMgd2l0aCBrZXkgdmFsIHBhaXJcbm1vcmUgdGhhbiAxIGxpbmUgb2YgY29kZSB1c2UgcGFyZW50aGVzZXMgZm9yIGpzeCBleC8uIGxpbmUgMjFcbiAvLyBwcm9wcyB3aGF0IHlvdSBwYXNzIGluIGZyb20gdGhlIHBhcmVudCBjb21wb25lbWVudCAoaW5kZXguanMpXG4vL2NhbiBiaW5kIGluIGNvbnN0cnVjdG9yIG9yIGJlbG93IGluIHJlbmRlclxuXG4qL1xuXG5pbXBvcnQgbW92aWVzIGZyb20gJy4uL21vdmllRGF0YS5qcyc7XG5pbXBvcnQgTW92aWVMaXN0IGZyb20gJy4vTW92aWVMaXN0LmpzJztcbmltcG9ydCBTZWFyY2hCYXIgZnJvbSAnLi9TZWFyY2hCYXIuanMnO1xuaW1wb3J0IEFkZE1vdmllIGZyb20gJy4vQWRkTW92aWUuanMnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW92aWVzOiBtb3ZpZXMsXG4gICAgICBzZWFyY2hVc2VyVGV4dDogJycsXG4gICAgICBhZGRNb3ZpZVRleHQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZSA9IHRoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0ID0gdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hVc2VyVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQWRkTW92aWVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWRkTW92aWVUZXh0OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICAvLyBhZGRNb3ZpZVRleHQgPSAnZ29vZCB3aWxsIGh1bnRpbmcnIFxuICAvLyB7dGl0bGU6ICdtZWFuIGdpcmxzJ31cblxuICBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCgpIHsgICAvL3N0YXRlIGlzIGN1cnJlbnRseSBudWxsIG5lZWQgdG8gZml4XG4gICAgdmFyIHJlc3VsdHMgPSB0aGlzLnN0YXRlLm1vdmllcztcbiAgICByZXN1bHRzLnB1c2goe3RpdGxlOiB0aGlzLnN0YXRlLmFkZE1vdmllVGV4dH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3ZpZXM6IHJlc3VsdHMgfSk7XG4gICAgdGhpcy5zdGF0ZS5hZGRNb3ZpZVRleHQgPSAnJztcbiAgICAvL0FkZE1vdmllLWNsZWFyZm9ybVxuICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUubW92aWVzKVxuICB9XG5cbiAgaGFuZGxlU3VibWl0U2VhcmNoKCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLm1vdmllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGN1cnJlbnRNb3ZpZSA9IHRoaXMuc3RhdGUubW92aWVzW2ldO1xuICAgICAgaWYgKGN1cnJlbnRNb3ZpZS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc3RhdGUuc2VhcmNoVXNlclRleHQudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGN1cnJlbnRNb3ZpZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYWxlcnQoJ1NvcnJ5LCB0aXRsZSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHsgbW92aWVzIH0pO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgbW92aWVzOiByZXN1bHRzIH0pO1xuICB9XG4gIC8qXG5zZXQgYSB2YXJpYWJsZSBmb3IgZm91bmQgbW92aWVzXG5pZiB0aGUgdGV4dCBib3ggdmFsdWUgdGhhdCB0aGUgdXNlciBzdWJtaXRzIGlzIGluY2x1ZGVkIGluIHRoZSBtb3ZpZSBsaXN0LCByZXR1cm4gdGhlIGxpc3Qgd2l0aCB0aGUgdGl0dGxlcyBtYXRjaGluZ1xuKi9cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoMT5Nb3ZpZSBMaXN0PC9oMT5cbiAgICAgICAgICAgIDxBZGRNb3ZpZSBhZGRNb3ZpZVRleHQgPSB7dGhpcy5zdGF0ZS5hZGRNb3ZpZVRleHR9IGhhbmRsZUFkZE1vdmllU3VibWl0ID0ge3RoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXR9IGhhbmRsZUFkZE1vdmllQ2hhbmdlID17dGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZX0+PC9BZGRNb3ZpZT5cbiAgICAgICAgICAgIDxTZWFyY2hCYXIgc2VhcmNoVXNlclRleHQ9e3RoaXMuc3RhdGUuc2VhcmNoVXNlclRleHR9IGhhbmRsZVN1Ym1pdFNlYXJjaD17dGhpcy5oYW5kbGVTdWJtaXRTZWFyY2guYmluZCh0aGlzKX0gaGFuZGxlQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfSAvPlxuICAgICAgICAgICAgPE1vdmllTGlzdCBtb3ZpZXM9e3RoaXMuc3RhdGUubW92aWVzfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuLy9pZiBpdCBpcyBhIG1ldGhvZCBvbiB0aGlzLCB0aGVuIHRoZSBzZWFyY2ggaXMgdGhlIGNvbXBvbmVudCwgdGhpcyBpcyB0aGUgYXBwIGNvbXBvbmVtZW50ICJdfQ==