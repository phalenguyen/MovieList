
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down
to the next componenents
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }

  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }

  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }

  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = [];
    results.push(this.state.addMovieText);
    this.setState({ movies: results });
  }

  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i++) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      return this.setState({ movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsImhhbmRsZVN1Ym1pdFNlYXJjaCIsImkiLCJsZW5ndGgiLCJjdXJyZW50TW92aWUiLCJ0aXRsZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJhbGVydCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7Ozs7Ozs7O0FBYUEsT0FBT0EsTUFBUCxNQUFtQixpQkFBbkI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixlQUFyQjs7QUFFQSxNQUFNQyxHQUFOLFNBQWtCQyxNQUFNQyxTQUF4QixDQUFrQztBQUNoQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hULFlBRFc7QUFFWFUsc0JBQWdCLEVBRkw7QUFHWEMsb0JBQWM7QUFISCxLQUFiO0FBS0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBS0Esb0JBQUwsQ0FBMEJDLElBQTFCLENBQStCLElBQS9CLENBQTVCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBS0Esb0JBQUwsQ0FBMEJELElBQTFCLENBQStCLElBQS9CLENBQTVCO0FBQ0EsU0FBS0UsU0FBTCxHQUFpQixLQUFLTixLQUF0QjtBQUNEOztBQUVETyxlQUFhQyxLQUFiLEVBQW9CO0FBQ2xCLFNBQUtDLFFBQUwsQ0FBYyxFQUFFUixnQkFBZ0JPLE1BQU1FLE1BQU4sQ0FBYUMsS0FBL0IsRUFBZDtBQUNEOztBQUVEUix1QkFBcUJLLEtBQXJCLEVBQTRCO0FBQzFCLFNBQUtDLFFBQUwsQ0FBYyxFQUFFUCxjQUFjTSxNQUFNRSxNQUFOLENBQWFDLEtBQTdCLEVBQWQ7QUFDRDs7QUFFRE4seUJBQXVCO0FBQUk7QUFDekIsUUFBSU8sVUFBVSxFQUFkO0FBQ0FBLFlBQVFDLElBQVIsQ0FBYSxLQUFLYixLQUFMLENBQVdFLFlBQXhCO0FBQ0EsU0FBS08sUUFBTCxDQUFjLEVBQUVsQixRQUFRcUIsT0FBVixFQUFkO0FBQ0Q7O0FBRURFLHVCQUFxQjtBQUNuQixRQUFJRixVQUFVLEVBQWQ7QUFDQSxTQUFLLElBQUlHLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLZixLQUFMLENBQVdULE1BQVgsQ0FBa0J5QixNQUF0QyxFQUE4Q0QsR0FBOUMsRUFBbUQ7QUFDakQsVUFBSUUsZUFBZSxLQUFLakIsS0FBTCxDQUFXVCxNQUFYLENBQWtCd0IsQ0FBbEIsQ0FBbkI7QUFDQSxVQUFJRSxhQUFhQyxLQUFiLENBQW1CQyxXQUFuQixHQUFpQ0MsUUFBakMsQ0FBMEMsS0FBS3BCLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQmtCLFdBQTFCLEVBQTFDLENBQUosRUFBd0Y7QUFDdEZQLGdCQUFRQyxJQUFSLENBQWFJLFlBQWI7QUFDRDtBQUNGO0FBQ0QsUUFBSUwsUUFBUUksTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QkssWUFBTSx3QkFBTjtBQUNBLGFBQU8sS0FBS1osUUFBTCxDQUFjLEVBQUVsQixNQUFGLEVBQWQsQ0FBUDtBQUNEO0FBQ0QsU0FBS2tCLFFBQUwsQ0FBYyxFQUFFbEIsUUFBUXFCLE9BQVYsRUFBZDtBQUNEO0FBQ0Q7Ozs7O0FBS0FVLFdBQVM7QUFDUCxXQUNJO0FBQUE7QUFBQTtBQUNJO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FESjtBQUdJLDBCQUFDLFNBQUQsSUFBVyxnQkFBZ0IsS0FBS3RCLEtBQUwsQ0FBV0MsY0FBdEMsRUFBc0Qsb0JBQW9CLEtBQUthLGtCQUFMLENBQXdCVixJQUF4QixDQUE2QixJQUE3QixDQUExRSxFQUE4RyxjQUFjLEtBQUtHLFlBQUwsQ0FBa0JILElBQWxCLENBQXVCLElBQXZCLENBQTVILEdBSEo7QUFJSSwwQkFBQyxTQUFELElBQVcsUUFBUSxLQUFLSixLQUFMLENBQVdULE1BQTlCO0FBSkosS0FESjtBQVFEO0FBdkQrQjs7QUEwRGxDLGVBQWVJLEdBQWY7QUFDQSIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG53aGVyZSBjb21wb25lbnRzIHN0YXJ0XG5jb25zdHJ1Y3RvciBzZXRzIHVwIGFwcCB3aXRoIHdoYXRldmVyIHByb3BzIGFyZSBwYXNzZWQgZG93blxuc3RhdGUgZ29lcyBpbnNpZGUgY29uc3RydWN0b3JcbmNvbnN0cnVjdG9yL3N1cGVyIC0gaWYgeW91IHBhc3MgcHJvcHMgaW5zaWRlIGNvbnN0cnV0b3IgY2FsbCwgaXQgcGFzc2VzIGl0IGRvd25cbnRvIHRoZSBuZXh0IGNvbXBvbmVuZW50c1xudGhpcy5zdGF0ZSA9IG9iamVjdCBhbHdheXMgd2l0aCBrZXkgdmFsIHBhaXJcbm1vcmUgdGhhbiAxIGxpbmUgb2YgY29kZSB1c2UgcGFyZW50aGVzZXMgZm9yIGpzeCBleC8uIGxpbmUgMjFcbiAvLyBwcm9wcyB3aGF0IHlvdSBwYXNzIGluIGZyb20gdGhlIHBhcmVudCBjb21wb25lbWVudCAoaW5kZXguanMpXG4vL2NhbiBiaW5kIGluIGNvbnN0cnVjdG9yIG9yIGJlbG93IGluIHJlbmRlclxuXG4qL1xuXG5pbXBvcnQgbW92aWVzIGZyb20gJy4uL21vdmllRGF0YS5qcyc7XG5pbXBvcnQgTW92aWVMaXN0IGZyb20gJy4vTW92aWVMaXN0LmpzJztcbmltcG9ydCBTZWFyY2hCYXIgZnJvbSAnLi9TZWFyY2hCYXIuanMnO1xuaW1wb3J0IEFkZE1vdmllIGZyb20gJy4vQWRkTW92aWUuanMnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW92aWVzLFxuICAgICAgc2VhcmNoVXNlclRleHQ6ICcnLFxuICAgICAgYWRkTW92aWVUZXh0OiAnJyxcbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2UgPSB0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHRoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmJhc2VTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VhcmNoVXNlclRleHQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIGhhbmRsZUFkZE1vdmllQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFkZE1vdmllVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQWRkTW92aWVTdWJtaXQoKSB7ICAgLy9zdGF0ZSBpcyBjdXJyZW50bHkgbnVsbCBuZWVkIHRvIGZpeFxuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcmVzdWx0cy5wdXNoKHRoaXMuc3RhdGUuYWRkTW92aWVUZXh0KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW92aWVzOiByZXN1bHRzIH0pO1xuICB9XG5cbiAgaGFuZGxlU3VibWl0U2VhcmNoKCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLm1vdmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGN1cnJlbnRNb3ZpZSA9IHRoaXMuc3RhdGUubW92aWVzW2ldO1xuICAgICAgaWYgKGN1cnJlbnRNb3ZpZS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc3RhdGUuc2VhcmNoVXNlclRleHQudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGN1cnJlbnRNb3ZpZSk7XG4gICAgICB9ICBcbiAgICB9XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBhbGVydCgnU29ycnksIHRpdGxlIG5vdCBmb3VuZCcpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoeyBtb3ZpZXMgfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3ZpZXM6IHJlc3VsdHMgfSk7XG4gIH1cbiAgLypcbnNldCBhIHZhcmlhYmxlIGZvciBmb3VuZCBtb3ZpZXNcbmlmIHRoZSB0ZXh0IGJveCB2YWx1ZSB0aGF0IHRoZSB1c2VyIHN1Ym1pdHMgaXMgaW5jbHVkZWQgaW4gdGhlIG1vdmllIGxpc3QsIHJldHVybiB0aGUgbGlzdCB3aXRoIHRoZSB0aXR0bGVzIG1hdGNoaW5nXG4qL1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPk1vdmllIExpc3Q8L2gxPlxuICAgICAgICAgICAgey8qIDxBZGRNb3ZpZSBhZGRNb3ZpZVRleHQgPSB7dGhpcy5zdGF0ZS5hZGRNb3ZpZVRleHR9IGhhbmRsZUFkZE1vdmllU3VibWl0ID0ge3RoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXR9IGhhbmRsZUFkZE1vdmllQ2hhbmdlID17dGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZX0+PC9BZGRNb3ZpZT4gKi99XG4gICAgICAgICAgICA8U2VhcmNoQmFyIHNlYXJjaFVzZXJUZXh0PXt0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0fSBoYW5kbGVTdWJtaXRTZWFyY2g9e3RoaXMuaGFuZGxlU3VibWl0U2VhcmNoLmJpbmQodGhpcyl9IGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX0gLz5cbiAgICAgICAgICAgIDxNb3ZpZUxpc3QgbW92aWVzPXt0aGlzLnN0YXRlLm1vdmllc30vPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbi8vaWYgaXQgaXMgYSBtZXRob2Qgb24gdGhpcywgdGhlbiB0aGUgc2VhcmNoIGlzIHRoZSBjb21wb25lbnQsIHRoaXMgaXMgdGhlIGFwcCBjb21wb25lbWVudCAiXX0=