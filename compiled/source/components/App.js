
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down
to the next componenents
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: 'goodwill hunting'
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }

  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }

  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }

  // addMovieText = 'good will hunting' 
  // {title: 'mean girls'}

  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = this.state.movies;
    results.push({ title: this.state.addMovieText });
    this.setState({ movies: results });
    // this.state.addMovieText = '';
    //AddMovie-clearform;
    document.getElementById('AddMovieButtonVal').value = '';
    //$()
    console.log(this.state.movies);
  }

  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i += 1) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      return this.setState({ movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(AddMovie, { addMovieText: this.state.addMovieText, handleAddMovieSubmit: this.handleAddMovieSubmit, handleAddMovieChange: this.handleAddMovieChange }),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsInRpdGxlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnNvbGUiLCJsb2ciLCJoYW5kbGVTdWJtaXRTZWFyY2giLCJpIiwibGVuZ3RoIiwiY3VycmVudE1vdmllIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImFsZXJ0IiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFhQSxPQUFPQSxNQUFQLE1BQW1CLGlCQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixnQkFBdEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGVBQXJCOztBQUVBLE1BQU1DLEdBQU4sU0FBa0JDLE1BQU1DLFNBQXhCLENBQWtDO0FBQ2hDQyxjQUFZQyxLQUFaLEVBQW1CO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWFQsY0FBUUEsTUFERztBQUVYVSxzQkFBZ0IsRUFGTDtBQUdYQyxvQkFBYztBQUhILEtBQWI7QUFLQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkMsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkQsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLEtBQUtOLEtBQXRCO0FBQ0Q7O0FBRURPLGVBQWFDLEtBQWIsRUFBb0I7QUFDbEIsU0FBS0MsUUFBTCxDQUFjLEVBQUVSLGdCQUFnQk8sTUFBTUUsTUFBTixDQUFhQyxLQUEvQixFQUFkO0FBQ0Q7O0FBRURSLHVCQUFxQkssS0FBckIsRUFBNEI7QUFDMUIsU0FBS0MsUUFBTCxDQUFjLEVBQUVQLGNBQWNNLE1BQU1FLE1BQU4sQ0FBYUMsS0FBN0IsRUFBZDtBQUNEOztBQUVEO0FBQ0E7O0FBRUFOLHlCQUF1QjtBQUFJO0FBQ3pCLFFBQUlPLFVBQVUsS0FBS1osS0FBTCxDQUFXVCxNQUF6QjtBQUNBcUIsWUFBUUMsSUFBUixDQUFhLEVBQUNDLE9BQU8sS0FBS2QsS0FBTCxDQUFXRSxZQUFuQixFQUFiO0FBQ0EsU0FBS08sUUFBTCxDQUFjLEVBQUVsQixRQUFRcUIsT0FBVixFQUFkO0FBQ0E7QUFDQTtBQUNBRyxhQUFTQyxjQUFULENBQXdCLG1CQUF4QixFQUE2Q0wsS0FBN0MsR0FBcUQsRUFBckQ7QUFDQTtBQUNBTSxZQUFRQyxHQUFSLENBQVksS0FBS2xCLEtBQUwsQ0FBV1QsTUFBdkI7QUFDRDs7QUFFRDRCLHVCQUFxQjtBQUNuQixRQUFJUCxVQUFVLEVBQWQ7QUFDQSxTQUFLLElBQUlRLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLcEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCOEIsTUFBdEMsRUFBOENELEtBQUssQ0FBbkQsRUFBc0Q7QUFDcEQsVUFBSUUsZUFBZSxLQUFLdEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCNkIsQ0FBbEIsQ0FBbkI7QUFDQSxVQUFJRSxhQUFhUixLQUFiLENBQW1CUyxXQUFuQixHQUFpQ0MsUUFBakMsQ0FBMEMsS0FBS3hCLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQnNCLFdBQTFCLEVBQTFDLENBQUosRUFBd0Y7QUFDdEZYLGdCQUFRQyxJQUFSLENBQWFTLFlBQWI7QUFDRDtBQUNGO0FBQ0QsUUFBSVYsUUFBUVMsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QkksWUFBTSx3QkFBTjtBQUNBLGFBQU8sS0FBS2hCLFFBQUwsQ0FBYyxFQUFFbEIsTUFBRixFQUFkLENBQVA7QUFDRDtBQUNELFNBQUtrQixRQUFMLENBQWMsRUFBRWxCLFFBQVFxQixPQUFWLEVBQWQ7QUFDRDtBQUNEOzs7OztBQUtBYyxXQUFTO0FBQ1AsV0FDSTtBQUFBO0FBQUE7QUFDSTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREo7QUFFSSwwQkFBQyxRQUFELElBQVUsY0FBZ0IsS0FBSzFCLEtBQUwsQ0FBV0UsWUFBckMsRUFBbUQsc0JBQXdCLEtBQUtHLG9CQUFoRixFQUFzRyxzQkFBdUIsS0FBS0Ysb0JBQWxJLEdBRko7QUFHSSwwQkFBQyxTQUFELElBQVcsZ0JBQWdCLEtBQUtILEtBQUwsQ0FBV0MsY0FBdEMsRUFBc0Qsb0JBQW9CLEtBQUtrQixrQkFBTCxDQUF3QmYsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBMUUsRUFBOEcsY0FBYyxLQUFLRyxZQUFMLENBQWtCSCxJQUFsQixDQUF1QixJQUF2QixDQUE1SCxHQUhKO0FBSUksMEJBQUMsU0FBRCxJQUFXLFFBQVEsS0FBS0osS0FBTCxDQUFXVCxNQUE5QjtBQUpKLEtBREo7QUFRRDtBQS9EK0I7O0FBa0VsQyxlQUFlSSxHQUFmO0FBQ0EiLCJmaWxlIjoiQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxud2hlcmUgY29tcG9uZW50cyBzdGFydFxuY29uc3RydWN0b3Igc2V0cyB1cCBhcHAgd2l0aCB3aGF0ZXZlciBwcm9wcyBhcmUgcGFzc2VkIGRvd25cbnN0YXRlIGdvZXMgaW5zaWRlIGNvbnN0cnVjdG9yXG5jb25zdHJ1Y3Rvci9zdXBlciAtIGlmIHlvdSBwYXNzIHByb3BzIGluc2lkZSBjb25zdHJ1dG9yIGNhbGwsIGl0IHBhc3NlcyBpdCBkb3duXG50byB0aGUgbmV4dCBjb21wb25lbmVudHNcbnRoaXMuc3RhdGUgPSBvYmplY3QgYWx3YXlzIHdpdGgga2V5IHZhbCBwYWlyXG5tb3JlIHRoYW4gMSBsaW5lIG9mIGNvZGUgdXNlIHBhcmVudGhlc2VzIGZvciBqc3ggZXgvLiBsaW5lIDIxXG4gLy8gcHJvcHMgd2hhdCB5b3UgcGFzcyBpbiBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW1lbnQgKGluZGV4LmpzKVxuLy9jYW4gYmluZCBpbiBjb25zdHJ1Y3RvciBvciBiZWxvdyBpbiByZW5kZXJcblxuKi9cblxuaW1wb3J0IG1vdmllcyBmcm9tICcuLi9tb3ZpZURhdGEuanMnO1xuaW1wb3J0IE1vdmllTGlzdCBmcm9tICcuL01vdmllTGlzdC5qcyc7XG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gJy4vU2VhcmNoQmFyLmpzJztcbmltcG9ydCBBZGRNb3ZpZSBmcm9tICcuL0FkZE1vdmllLmpzJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vdmllczogbW92aWVzLFxuICAgICAgc2VhcmNoVXNlclRleHQ6ICcnLFxuICAgICAgYWRkTW92aWVUZXh0OiAnZ29vZHdpbGwgaHVudGluZycsXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlID0gdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXQgPSB0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5iYXNlU3RhdGUgPSB0aGlzLnN0YXRlO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFVzZXJUZXh0OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICBoYW5kbGVBZGRNb3ZpZUNoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBhZGRNb3ZpZVRleHQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIC8vIGFkZE1vdmllVGV4dCA9ICdnb29kIHdpbGwgaHVudGluZycgXG4gIC8vIHt0aXRsZTogJ21lYW4gZ2lybHMnfVxuXG4gIGhhbmRsZUFkZE1vdmllU3VibWl0KCkgeyAgIC8vc3RhdGUgaXMgY3VycmVudGx5IG51bGwgbmVlZCB0byBmaXhcbiAgICB2YXIgcmVzdWx0cyA9IHRoaXMuc3RhdGUubW92aWVzO1xuICAgIHJlc3VsdHMucHVzaCh7dGl0bGU6IHRoaXMuc3RhdGUuYWRkTW92aWVUZXh0fSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdmllczogcmVzdWx0cyB9KTtcbiAgICAvLyB0aGlzLnN0YXRlLmFkZE1vdmllVGV4dCA9ICcnO1xuICAgIC8vQWRkTW92aWUtY2xlYXJmb3JtO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdBZGRNb3ZpZUJ1dHRvblZhbCcpLnZhbHVlID0gJyc7XG4gICAgLy8kKClcbiAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXRlLm1vdmllcylcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdFNlYXJjaCgpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5tb3ZpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBjdXJyZW50TW92aWUgPSB0aGlzLnN0YXRlLm1vdmllc1tpXTtcbiAgICAgIGlmIChjdXJyZW50TW92aWUudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChjdXJyZW50TW92aWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGFsZXJ0KCdTb3JyeSwgdGl0bGUgbm90IGZvdW5kJyk7XG4gICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7IG1vdmllcyB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdmllczogcmVzdWx0cyB9KTtcbiAgfVxuICAvKlxuc2V0IGEgdmFyaWFibGUgZm9yIGZvdW5kIG1vdmllc1xuaWYgdGhlIHRleHQgYm94IHZhbHVlIHRoYXQgdGhlIHVzZXIgc3VibWl0cyBpcyBpbmNsdWRlZCBpbiB0aGUgbW92aWUgbGlzdCwgcmV0dXJuIHRoZSBsaXN0IHdpdGggdGhlIHRpdHRsZXMgbWF0Y2hpbmdcbiovXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aDE+TW92aWUgTGlzdDwvaDE+XG4gICAgICAgICAgICA8QWRkTW92aWUgYWRkTW92aWVUZXh0ID0ge3RoaXMuc3RhdGUuYWRkTW92aWVUZXh0fSBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHt0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0fSBoYW5kbGVBZGRNb3ZpZUNoYW5nZSA9e3RoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2V9PjwvQWRkTW92aWU+XG4gICAgICAgICAgICA8U2VhcmNoQmFyIHNlYXJjaFVzZXJUZXh0PXt0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0fSBoYW5kbGVTdWJtaXRTZWFyY2g9e3RoaXMuaGFuZGxlU3VibWl0U2VhcmNoLmJpbmQodGhpcyl9IGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX0gLz5cbiAgICAgICAgICAgIDxNb3ZpZUxpc3QgbW92aWVzPXt0aGlzLnN0YXRlLm1vdmllc30vPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbi8vaWYgaXQgaXMgYSBtZXRob2Qgb24gdGhpcywgdGhlbiB0aGUgc2VhcmNoIGlzIHRoZSBjb21wb25lbnQsIHRoaXMgaXMgdGhlIGFwcCBjb21wb25lbWVudCAiXX0=