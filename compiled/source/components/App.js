
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down to the next componenents 
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
movies can also write as movies: movies 
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }
  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }
  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }
  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = [];
    results.push(this.state.addMovieText);
    this.setState({ movies: results });
  }
  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i++) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      return this.setState({ movies: movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsImhhbmRsZVN1Ym1pdFNlYXJjaCIsImkiLCJsZW5ndGgiLCJjdXJyZW50TW92aWUiLCJ0aXRsZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJhbGVydCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7Ozs7Ozs7O0FBYUEsT0FBT0EsTUFBUCxNQUFtQixpQkFBbkI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixlQUFyQjtBQUNBLE1BQU1DLEdBQU4sU0FBa0JDLE1BQU1DLFNBQXhCLENBQWtDO0FBQ2hDQyxjQUFZQyxLQUFaLEVBQW1CO0FBQ25CLFVBQU1BLEtBQU47QUFDRSxTQUFLQyxLQUFMLEdBQWE7QUFDWFQsY0FBUUEsTUFERztBQUVYVSxzQkFBZ0IsRUFGTDtBQUdYQyxvQkFBYztBQUhILEtBQWI7QUFLQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkMsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkQsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLEtBQUtOLEtBQXRCO0FBQ0Q7QUFDSE8sZUFBYUMsS0FBYixFQUFvQjtBQUNsQixTQUFLQyxRQUFMLENBQWMsRUFBQ1IsZ0JBQWdCTyxNQUFNRSxNQUFOLENBQWFDLEtBQTlCLEVBQWQ7QUFDRDtBQUNEUix1QkFBcUJLLEtBQXJCLEVBQTRCO0FBQzFCLFNBQUtDLFFBQUwsQ0FBYyxFQUFDUCxjQUFjTSxNQUFNRSxNQUFOLENBQWFDLEtBQTVCLEVBQWQ7QUFDRDtBQUNETix5QkFBc0I7QUFBSTtBQUN4QixRQUFJTyxVQUFVLEVBQWQ7QUFDQUEsWUFBUUMsSUFBUixDQUFhLEtBQUtiLEtBQUwsQ0FBV0UsWUFBeEI7QUFDQSxTQUFLTyxRQUFMLENBQWMsRUFBQ2xCLFFBQVFxQixPQUFULEVBQWQ7QUFDRDtBQUNERSx1QkFBcUI7QUFDbkIsUUFBSUYsVUFBVSxFQUFkO0FBQ0EsU0FBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS2YsS0FBTCxDQUFXVCxNQUFYLENBQWtCeUIsTUFBdEMsRUFBOENELEdBQTlDLEVBQW1EO0FBQ2pELFVBQUlFLGVBQWUsS0FBS2pCLEtBQUwsQ0FBV1QsTUFBWCxDQUFrQndCLENBQWxCLENBQW5CO0FBQ0EsVUFBSUUsYUFBYUMsS0FBYixDQUFtQkMsV0FBbkIsR0FBaUNDLFFBQWpDLENBQTBDLEtBQUtwQixLQUFMLENBQVdDLGNBQVgsQ0FBMEJrQixXQUExQixFQUExQyxDQUFKLEVBQXdGO0FBQ3hGUCxnQkFBUUMsSUFBUixDQUFhSSxZQUFiO0FBQ0M7QUFDRjtBQUNELFFBQUlMLFFBQVFJLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEJLLFlBQU0sd0JBQU47QUFDQSxhQUFPLEtBQUtaLFFBQUwsQ0FBYyxFQUFDbEIsUUFBUUEsTUFBVCxFQUFkLENBQVA7QUFDQztBQUNILFNBQUtrQixRQUFMLENBQWMsRUFBQ2xCLFFBQVFxQixPQUFULEVBQWQ7QUFFRDtBQUNEOzs7OztBQUtJVSxXQUFTO0FBQ0wsV0FDSTtBQUFBO0FBQUE7QUFDSTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREo7QUFHSSwwQkFBQyxTQUFELElBQVcsZ0JBQWdCLEtBQUt0QixLQUFMLENBQVdDLGNBQXRDLEVBQXNELG9CQUFvQixLQUFLYSxrQkFBTCxDQUF3QlYsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBMUUsRUFBOEcsY0FBYyxLQUFLRyxZQUFMLENBQWtCSCxJQUFsQixDQUF1QixJQUF2QixDQUE1SCxHQUhKO0FBSUksMEJBQUMsU0FBRCxJQUFXLFFBQVEsS0FBS0osS0FBTCxDQUFXVCxNQUE5QjtBQUpKLEtBREo7QUFRSDtBQXBENkI7O0FBdURsQyxlQUFlSSxHQUFmO0FBQ0EiLCJmaWxlIjoiQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxud2hlcmUgY29tcG9uZW50cyBzdGFydFxuY29uc3RydWN0b3Igc2V0cyB1cCBhcHAgd2l0aCB3aGF0ZXZlciBwcm9wcyBhcmUgcGFzc2VkIGRvd25cbnN0YXRlIGdvZXMgaW5zaWRlIGNvbnN0cnVjdG9yXG5jb25zdHJ1Y3Rvci9zdXBlciAtIGlmIHlvdSBwYXNzIHByb3BzIGluc2lkZSBjb25zdHJ1dG9yIGNhbGwsIGl0IHBhc3NlcyBpdCBkb3duIHRvIHRoZSBuZXh0IGNvbXBvbmVuZW50cyBcbnRoaXMuc3RhdGUgPSBvYmplY3QgYWx3YXlzIHdpdGgga2V5IHZhbCBwYWlyXG5tb3JlIHRoYW4gMSBsaW5lIG9mIGNvZGUgdXNlIHBhcmVudGhlc2VzIGZvciBqc3ggZXgvLiBsaW5lIDIxXG5tb3ZpZXMgY2FuIGFsc28gd3JpdGUgYXMgbW92aWVzOiBtb3ZpZXMgXG4gLy8gcHJvcHMgd2hhdCB5b3UgcGFzcyBpbiBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW1lbnQgKGluZGV4LmpzKVxuLy9jYW4gYmluZCBpbiBjb25zdHJ1Y3RvciBvciBiZWxvdyBpbiByZW5kZXJcblxuKi9cblxuaW1wb3J0IG1vdmllcyBmcm9tICcuLi9tb3ZpZURhdGEuanMnO1xuaW1wb3J0IE1vdmllTGlzdCBmcm9tICcuL01vdmllTGlzdC5qcyc7XG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gJy4vU2VhcmNoQmFyLmpzJztcbmltcG9ydCBBZGRNb3ZpZSBmcm9tICcuL0FkZE1vdmllLmpzJztcbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW92aWVzOiBtb3ZpZXMsXG4gICAgICBzZWFyY2hVc2VyVGV4dDogJycsIFxuICAgICAgYWRkTW92aWVUZXh0OiAnJ1xuICAgICAgfTtcbiAgICB0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlID0gdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHRoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXQuYmluZCh0aGlzKVxuICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgfVxuaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHRoaXMuc2V0U3RhdGUoe3NlYXJjaFVzZXJUZXh0OiBldmVudC50YXJnZXQudmFsdWV9KTtcbn1cbmhhbmRsZUFkZE1vdmllQ2hhbmdlKGV2ZW50KSB7XG4gIHRoaXMuc2V0U3RhdGUoe2FkZE1vdmllVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG59XG5oYW5kbGVBZGRNb3ZpZVN1Ym1pdCgpeyAgIC8vc3RhdGUgaXMgY3VycmVudGx5IG51bGwgbmVlZCB0byBmaXhcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgcmVzdWx0cy5wdXNoKHRoaXMuc3RhdGUuYWRkTW92aWVUZXh0KVxuICB0aGlzLnNldFN0YXRlKHttb3ZpZXM6IHJlc3VsdHN9KVxufVxuaGFuZGxlU3VibWl0U2VhcmNoKCkge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhdGUubW92aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRNb3ZpZSA9IHRoaXMuc3RhdGUubW92aWVzW2ldO1xuICAgIGlmIChjdXJyZW50TW92aWUudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmVzdWx0cy5wdXNoKGN1cnJlbnRNb3ZpZSk7XG4gICAgfSAgXG4gIH1cbiAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxlcnQoJ1NvcnJ5LCB0aXRsZSBub3QgZm91bmQnKVxuICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHttb3ZpZXM6IG1vdmllc30pOyBcbiAgICB9XG4gIHRoaXMuc2V0U3RhdGUoe21vdmllczogcmVzdWx0c30pO1xuXG59XG4vKlxuc2V0IGEgdmFyaWFibGUgZm9yIGZvdW5kIG1vdmllc1xuaWYgdGhlIHRleHQgYm94IHZhbHVlIHRoYXQgdGhlIHVzZXIgc3VibWl0cyBpcyBpbmNsdWRlZCBpbiB0aGUgbW92aWUgbGlzdCwgcmV0dXJuIHRoZSBsaXN0IHdpdGggdGhlIHRpdHRsZXMgbWF0Y2hpbmdcbiovXG4gIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPk1vdmllIExpc3Q8L2gxPlxuICAgICAgICAgICAgICAgIHsvKiA8QWRkTW92aWUgYWRkTW92aWVUZXh0ID0ge3RoaXMuc3RhdGUuYWRkTW92aWVUZXh0fSBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHt0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0fSBoYW5kbGVBZGRNb3ZpZUNoYW5nZSA9e3RoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2V9PjwvQWRkTW92aWU+ICovfVxuICAgICAgICAgICAgICAgIDxTZWFyY2hCYXIgc2VhcmNoVXNlclRleHQ9e3RoaXMuc3RhdGUuc2VhcmNoVXNlclRleHR9IGhhbmRsZVN1Ym1pdFNlYXJjaD17dGhpcy5oYW5kbGVTdWJtaXRTZWFyY2guYmluZCh0aGlzKX0gaGFuZGxlQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfSAvPlxuICAgICAgICAgICAgICAgIDxNb3ZpZUxpc3QgbW92aWVzPXt0aGlzLnN0YXRlLm1vdmllc30vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbi8vaWYgaXQgaXMgYSBtZXRob2Qgb24gdGhpcywgdGhlbiB0aGUgc2VhcmNoIGlzIHRoZSBjb21wb25lbnQsIHRoaXMgaXMgdGhlIGFwcCBjb21wb25lbWVudCAiXX0=