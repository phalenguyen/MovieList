/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down
to the next componenents
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
 // props what you pass in from the parent componement (index.js)
//can bind in constructor or below in render

*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    this.baseState = this.state;
  }

  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }

  handleAddMovieChange(event) {
    this.setState({ addMovieText: event.target.value });
  }

  // addMovieText = 'good will hunting'
  // {title: 'mean girls'}

  handleAddMovieSubmit() {
    // state is currently null need to fix
    const results = this.state.movies;
    results.push({ title: this.state.addMovieText });
    this.setState({ movies: results });
    // this.state.addMovieText = '';
    // AddMovie-clearform;
    document.getElementById('AddMovieButtonVal').value = '';
    // $()
    console.log(this.state.movies);
  }

  handleSubmitSearch() {
    const results = [];
    for (let i = 0; i < this.state.movies.length; i += 1) {
      const currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (results.length === 0) {
      alert('Sorry, title not found');
      document.getElementById('SearchButtonVal').value = '';
      return this.setState({ movies });
    }
    this.setState({ movies: results });
    document.getElementById('SearchButtonVal').value = '';
  }

  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(AddMovie, {
        addMovieText: this.state.addMovieText,
        handleAddMovieSubmit: this.handleAddMovieSubmit,
        handleAddMovieChange: this.handleAddMovieChange
      }),
      React.createElement(SearchBar, {
        searchUserText: this.state.searchUserText,
        handleSubmitSearch: this.handleSubmitSearch.bind(this),
        handleChange: this.handleChange.bind(this)
      }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
// if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJiYXNlU3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsInRpdGxlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnNvbGUiLCJsb2ciLCJoYW5kbGVTdWJtaXRTZWFyY2giLCJpIiwibGVuZ3RoIiwiY3VycmVudE1vdmllIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImFsZXJ0IiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQWFBLE9BQU9BLE1BQVAsTUFBbUIsaUJBQW5CO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixnQkFBdEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZUFBckI7O0FBRUEsTUFBTUMsR0FBTixTQUFrQkMsTUFBTUMsU0FBeEIsQ0FBa0M7QUFDaENDLGNBQVlDLEtBQVosRUFBbUI7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYVCxZQURXO0FBRVhVLHNCQUFnQixFQUZMO0FBR1hDLG9CQUFjO0FBSEgsS0FBYjtBQUtBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCRCxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtFLFNBQUwsR0FBaUIsS0FBS04sS0FBdEI7QUFDRDs7QUFFRE8sZUFBYUMsS0FBYixFQUFvQjtBQUNsQixTQUFLQyxRQUFMLENBQWMsRUFBRVIsZ0JBQWdCTyxNQUFNRSxNQUFOLENBQWFDLEtBQS9CLEVBQWQ7QUFDRDs7QUFFRFIsdUJBQXFCSyxLQUFyQixFQUE0QjtBQUMxQixTQUFLQyxRQUFMLENBQWMsRUFBRVAsY0FBY00sTUFBTUUsTUFBTixDQUFhQyxLQUE3QixFQUFkO0FBQ0Q7O0FBRUQ7QUFDQTs7QUFFQU4seUJBQXVCO0FBQ3JCO0FBQ0EsVUFBTU8sVUFBVSxLQUFLWixLQUFMLENBQVdULE1BQTNCO0FBQ0FxQixZQUFRQyxJQUFSLENBQWEsRUFBRUMsT0FBTyxLQUFLZCxLQUFMLENBQVdFLFlBQXBCLEVBQWI7QUFDQSxTQUFLTyxRQUFMLENBQWMsRUFBRWxCLFFBQVFxQixPQUFWLEVBQWQ7QUFDQTtBQUNBO0FBQ0FHLGFBQVNDLGNBQVQsQ0FBd0IsbUJBQXhCLEVBQTZDTCxLQUE3QyxHQUFxRCxFQUFyRDtBQUNBO0FBQ0FNLFlBQVFDLEdBQVIsQ0FBWSxLQUFLbEIsS0FBTCxDQUFXVCxNQUF2QjtBQUNEOztBQUVENEIsdUJBQXFCO0FBQ25CLFVBQU1QLFVBQVUsRUFBaEI7QUFDQSxTQUFLLElBQUlRLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLcEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCOEIsTUFBdEMsRUFBOENELEtBQUssQ0FBbkQsRUFBc0Q7QUFDcEQsWUFBTUUsZUFBZSxLQUFLdEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCNkIsQ0FBbEIsQ0FBckI7QUFDQSxVQUNFRSxhQUFhUixLQUFiLENBQ0dTLFdBREgsR0FFR0MsUUFGSCxDQUVZLEtBQUt4QixLQUFMLENBQVdDLGNBQVgsQ0FBMEJzQixXQUExQixFQUZaLENBREYsRUFJRTtBQUNBWCxnQkFBUUMsSUFBUixDQUFhUyxZQUFiO0FBQ0Q7QUFDRjtBQUNELFFBQUlWLFFBQVFTLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEJJLFlBQU0sd0JBQU47QUFDQVYsZUFBU0MsY0FBVCxDQUF3QixpQkFBeEIsRUFBMkNMLEtBQTNDLEdBQW1ELEVBQW5EO0FBQ0EsYUFBTyxLQUFLRixRQUFMLENBQWMsRUFBRWxCLE1BQUYsRUFBZCxDQUFQO0FBQ0Q7QUFDRCxTQUFLa0IsUUFBTCxDQUFjLEVBQUVsQixRQUFRcUIsT0FBVixFQUFkO0FBQ0FHLGFBQVNDLGNBQVQsQ0FBd0IsaUJBQXhCLEVBQTJDTCxLQUEzQyxHQUFtRCxFQUFuRDtBQUNEOztBQUVEOzs7OztBQUtBZSxXQUFTO0FBQ1AsV0FDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFFRSwwQkFBQyxRQUFEO0FBQ0Usc0JBQWMsS0FBSzFCLEtBQUwsQ0FBV0UsWUFEM0I7QUFFRSw4QkFBc0IsS0FBS0csb0JBRjdCO0FBR0UsOEJBQXNCLEtBQUtGO0FBSDdCLFFBRkY7QUFPRSwwQkFBQyxTQUFEO0FBQ0Usd0JBQWdCLEtBQUtILEtBQUwsQ0FBV0MsY0FEN0I7QUFFRSw0QkFBb0IsS0FBS2tCLGtCQUFMLENBQXdCZixJQUF4QixDQUE2QixJQUE3QixDQUZ0QjtBQUdFLHNCQUFjLEtBQUtHLFlBQUwsQ0FBa0JILElBQWxCLENBQXVCLElBQXZCO0FBSGhCLFFBUEY7QUFjRSwwQkFBQyxTQUFELElBQVcsUUFBUSxLQUFLSixLQUFMLENBQVdULE1BQTlCO0FBZEYsS0FERjtBQWtCRDtBQWpGK0I7O0FBb0ZsQyxlQUFlSSxHQUFmO0FBQ0EiLCJmaWxlIjoiQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbndoZXJlIGNvbXBvbmVudHMgc3RhcnRcbmNvbnN0cnVjdG9yIHNldHMgdXAgYXBwIHdpdGggd2hhdGV2ZXIgcHJvcHMgYXJlIHBhc3NlZCBkb3duXG5zdGF0ZSBnb2VzIGluc2lkZSBjb25zdHJ1Y3RvclxuY29uc3RydWN0b3Ivc3VwZXIgLSBpZiB5b3UgcGFzcyBwcm9wcyBpbnNpZGUgY29uc3RydXRvciBjYWxsLCBpdCBwYXNzZXMgaXQgZG93blxudG8gdGhlIG5leHQgY29tcG9uZW5lbnRzXG50aGlzLnN0YXRlID0gb2JqZWN0IGFsd2F5cyB3aXRoIGtleSB2YWwgcGFpclxubW9yZSB0aGFuIDEgbGluZSBvZiBjb2RlIHVzZSBwYXJlbnRoZXNlcyBmb3IganN4IGV4Ly4gbGluZSAyMVxuIC8vIHByb3BzIHdoYXQgeW91IHBhc3MgaW4gZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVtZW50IChpbmRleC5qcylcbi8vY2FuIGJpbmQgaW4gY29uc3RydWN0b3Igb3IgYmVsb3cgaW4gcmVuZGVyXG5cbiovXG5cbmltcG9ydCBtb3ZpZXMgZnJvbSAnLi4vbW92aWVEYXRhLmpzJztcbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSAnLi9Nb3ZpZUxpc3QuanMnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL1NlYXJjaEJhci5qcyc7XG5pbXBvcnQgQWRkTW92aWUgZnJvbSAnLi9BZGRNb3ZpZS5qcyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtb3ZpZXMsXG4gICAgICBzZWFyY2hVc2VyVGV4dDogJycsXG4gICAgICBhZGRNb3ZpZVRleHQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZSA9IHRoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0ID0gdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hVc2VyVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQWRkTW92aWVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWRkTW92aWVUZXh0OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICAvLyBhZGRNb3ZpZVRleHQgPSAnZ29vZCB3aWxsIGh1bnRpbmcnXG4gIC8vIHt0aXRsZTogJ21lYW4gZ2lybHMnfVxuXG4gIGhhbmRsZUFkZE1vdmllU3VibWl0KCkge1xuICAgIC8vIHN0YXRlIGlzIGN1cnJlbnRseSBudWxsIG5lZWQgdG8gZml4XG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuc3RhdGUubW92aWVzO1xuICAgIHJlc3VsdHMucHVzaCh7IHRpdGxlOiB0aGlzLnN0YXRlLmFkZE1vdmllVGV4dCB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW92aWVzOiByZXN1bHRzIH0pO1xuICAgIC8vIHRoaXMuc3RhdGUuYWRkTW92aWVUZXh0ID0gJyc7XG4gICAgLy8gQWRkTW92aWUtY2xlYXJmb3JtO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdBZGRNb3ZpZUJ1dHRvblZhbCcpLnZhbHVlID0gJyc7XG4gICAgLy8gJCgpXG4gICAgY29uc29sZS5sb2codGhpcy5zdGF0ZS5tb3ZpZXMpO1xuICB9XG5cbiAgaGFuZGxlU3VibWl0U2VhcmNoKCkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUubW92aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjdXJyZW50TW92aWUgPSB0aGlzLnN0YXRlLm1vdmllc1tpXTtcbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudE1vdmllLnRpdGxlXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAuaW5jbHVkZXModGhpcy5zdGF0ZS5zZWFyY2hVc2VyVGV4dC50b0xvd2VyQ2FzZSgpKVxuICAgICAgKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChjdXJyZW50TW92aWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGFsZXJ0KCdTb3JyeSwgdGl0bGUgbm90IGZvdW5kJyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnU2VhcmNoQnV0dG9uVmFsJykudmFsdWUgPSAnJztcbiAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHsgbW92aWVzIH0pO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgbW92aWVzOiByZXN1bHRzIH0pO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdTZWFyY2hCdXR0b25WYWwnKS52YWx1ZSA9ICcnO1xuICB9XG5cbiAgLypcbnNldCBhIHZhcmlhYmxlIGZvciBmb3VuZCBtb3ZpZXNcbmlmIHRoZSB0ZXh0IGJveCB2YWx1ZSB0aGF0IHRoZSB1c2VyIHN1Ym1pdHMgaXMgaW5jbHVkZWQgaW4gdGhlIG1vdmllIGxpc3QsIHJldHVybiB0aGUgbGlzdCB3aXRoIHRoZSB0aXR0bGVzIG1hdGNoaW5nXG4qL1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGgxPk1vdmllIExpc3Q8L2gxPlxuICAgICAgICA8QWRkTW92aWVcbiAgICAgICAgICBhZGRNb3ZpZVRleHQ9e3RoaXMuc3RhdGUuYWRkTW92aWVUZXh0fVxuICAgICAgICAgIGhhbmRsZUFkZE1vdmllU3VibWl0PXt0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0fVxuICAgICAgICAgIGhhbmRsZUFkZE1vdmllQ2hhbmdlPXt0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgICA8U2VhcmNoQmFyXG4gICAgICAgICAgc2VhcmNoVXNlclRleHQ9e3RoaXMuc3RhdGUuc2VhcmNoVXNlclRleHR9XG4gICAgICAgICAgaGFuZGxlU3VibWl0U2VhcmNoPXt0aGlzLmhhbmRsZVN1Ym1pdFNlYXJjaC5iaW5kKHRoaXMpfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX1cbiAgICAgICAgLz5cbiAgICAgICAgey8qIDxXYXRjaC8+ICovfVxuICAgICAgICB7LyogPFRvV2F0Y2g+PC9Ub1dhdGNoPiAqL31cbiAgICAgICAgPE1vdmllTGlzdCBtb3ZpZXM9e3RoaXMuc3RhdGUubW92aWVzfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4vLyBpZiBpdCBpcyBhIG1ldGhvZCBvbiB0aGlzLCB0aGVuIHRoZSBzZWFyY2ggaXMgdGhlIGNvbXBvbmVudCwgdGhpcyBpcyB0aGUgYXBwIGNvbXBvbmVtZW50XG4iXX0=