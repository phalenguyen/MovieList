
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down to the next componenents 
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
movies can also write as movies: movies 
 // props what you pass in from the parent componement (index.js)
*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: ''
    };
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    //can bind in constructor or below in render
  }
  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }
  handleAddMovieChange(event) {
    //console.log(this)
    this.setState({ addMovieText: event.target.value });
  }
  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = [];
    results.push(this.state.addMovieText);
    this.setState({ movies: results });
  }
  handleSubmitSearch() {
    var results = [];
    for (var i = 0; i < this.state.movies.length; i++) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (!results) {
      alert('Sorry, title not found');
      return this.setState({ movies: movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(AddMovie, { addMovieText: this.state.addMovieText, handleAddMovieSubmit: this.handleAddMovieSubmit, handleAddMovieChange: this.handleAddMovieChange }),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiaGFuZGxlQWRkTW92aWVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlQWRkTW92aWVTdWJtaXQiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZXN1bHRzIiwicHVzaCIsImhhbmRsZVN1Ym1pdFNlYXJjaCIsImkiLCJsZW5ndGgiLCJjdXJyZW50TW92aWUiLCJ0aXRsZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJhbGVydCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7Ozs7OztBQVdBLE9BQU9BLE1BQVAsTUFBbUIsaUJBQW5CO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixnQkFBdEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZUFBckI7QUFDQSxNQUFNQyxHQUFOLFNBQWtCQyxNQUFNQyxTQUF4QixDQUFrQztBQUM5QkMsY0FBWUMsS0FBWixFQUFtQjtBQUNmLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDVFQsY0FBUUEsTUFEQztBQUVUVSxzQkFBZ0IsRUFGUDtBQUdUQyxvQkFBYztBQUhMLEtBQWI7QUFLQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkMsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkQsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQTtBQUNIO0FBQ0RFLGVBQWFDLEtBQWIsRUFBb0I7QUFDbEIsU0FBS0MsUUFBTCxDQUFjLEVBQUNQLGdCQUFnQk0sTUFBTUUsTUFBTixDQUFhQyxLQUE5QixFQUFkO0FBQ0Q7QUFDRFAsdUJBQXFCSSxLQUFyQixFQUE0QjtBQUMxQjtBQUNBLFNBQUtDLFFBQUwsQ0FBYyxFQUFDTixjQUFjSyxNQUFNRSxNQUFOLENBQWFDLEtBQTVCLEVBQWQ7QUFDRDtBQUNETCx5QkFBc0I7QUFDcEI7QUFDQSxRQUFJTSxVQUFVLEVBQWQ7QUFDQUEsWUFBUUMsSUFBUixDQUFhLEtBQUtaLEtBQUwsQ0FBV0UsWUFBeEI7QUFDQSxTQUFLTSxRQUFMLENBQWMsRUFBQ2pCLFFBQVFvQixPQUFULEVBQWQ7QUFDRDtBQUNIRSx1QkFBcUI7QUFDakIsUUFBSUYsVUFBVSxFQUFkO0FBQ0EsU0FBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS2QsS0FBTCxDQUFXVCxNQUFYLENBQWtCd0IsTUFBdEMsRUFBOENELEdBQTlDLEVBQW1EO0FBQ2pELFVBQUlFLGVBQWUsS0FBS2hCLEtBQUwsQ0FBV1QsTUFBWCxDQUFrQnVCLENBQWxCLENBQW5CO0FBQ0YsVUFBSUUsYUFBYUMsS0FBYixDQUFtQkMsV0FBbkIsR0FBaUNDLFFBQWpDLENBQTBDLEtBQUtuQixLQUFMLENBQVdDLGNBQVgsQ0FBMEJpQixXQUExQixFQUExQyxDQUFKLEVBQXdGO0FBQ3RGUCxnQkFBUUMsSUFBUixDQUFhSSxZQUFiO0FBQ0Q7QUFDRjtBQUNELFFBQUksQ0FBQ0wsT0FBTCxFQUFjO0FBQ1pTLFlBQU0sd0JBQU47QUFDQSxhQUFPLEtBQUtaLFFBQUwsQ0FBYyxFQUFDakIsUUFBUUEsTUFBVCxFQUFkLENBQVA7QUFDRDtBQUNELFNBQUtpQixRQUFMLENBQWMsRUFBQ2pCLFFBQVFvQixPQUFULEVBQWQ7QUFDRDtBQUNIOzs7OztBQUtJVSxXQUFTO0FBQ0wsV0FDSTtBQUFBO0FBQUE7QUFDSTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREo7QUFFSSwwQkFBQyxRQUFELElBQVUsY0FBZ0IsS0FBS3JCLEtBQUwsQ0FBV0UsWUFBckMsRUFBbUQsc0JBQXdCLEtBQUtHLG9CQUFoRixFQUFzRyxzQkFBdUIsS0FBS0Ysb0JBQWxJLEdBRko7QUFHSSwwQkFBQyxTQUFELElBQVcsZ0JBQWtCLEtBQUtILEtBQUwsQ0FBV0MsY0FBeEMsRUFBd0Qsb0JBQXNCLEtBQUtZLGtCQUFMLENBQXdCVCxJQUF4QixDQUE2QixJQUE3QixDQUE5RSxFQUFrSCxjQUFnQixLQUFLRSxZQUFMLENBQWtCRixJQUFsQixDQUF1QixJQUF2QixDQUFsSSxHQUhKO0FBSUksMEJBQUMsU0FBRCxJQUFXLFFBQVUsS0FBS0osS0FBTCxDQUFXVCxNQUFoQztBQUpKLEtBREo7QUFRSDtBQXJENkI7O0FBd0RsQyxlQUFlSSxHQUFmO0FBQ0EiLCJmaWxlIjoiQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxud2hlcmUgY29tcG9uZW50cyBzdGFydFxuY29uc3RydWN0b3Igc2V0cyB1cCBhcHAgd2l0aCB3aGF0ZXZlciBwcm9wcyBhcmUgcGFzc2VkIGRvd25cbnN0YXRlIGdvZXMgaW5zaWRlIGNvbnN0cnVjdG9yXG5jb25zdHJ1Y3Rvci9zdXBlciAtIGlmIHlvdSBwYXNzIHByb3BzIGluc2lkZSBjb25zdHJ1dG9yIGNhbGwsIGl0IHBhc3NlcyBpdCBkb3duIHRvIHRoZSBuZXh0IGNvbXBvbmVuZW50cyBcbnRoaXMuc3RhdGUgPSBvYmplY3QgYWx3YXlzIHdpdGgga2V5IHZhbCBwYWlyXG5tb3JlIHRoYW4gMSBsaW5lIG9mIGNvZGUgdXNlIHBhcmVudGhlc2VzIGZvciBqc3ggZXgvLiBsaW5lIDIxXG5tb3ZpZXMgY2FuIGFsc28gd3JpdGUgYXMgbW92aWVzOiBtb3ZpZXMgXG4gLy8gcHJvcHMgd2hhdCB5b3UgcGFzcyBpbiBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW1lbnQgKGluZGV4LmpzKVxuKi9cblxuaW1wb3J0IG1vdmllcyBmcm9tICcuLi9tb3ZpZURhdGEuanMnO1xuaW1wb3J0IE1vdmllTGlzdCBmcm9tICcuL01vdmllTGlzdC5qcyc7XG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gJy4vU2VhcmNoQmFyLmpzJztcbmltcG9ydCBBZGRNb3ZpZSBmcm9tICcuL0FkZE1vdmllLmpzJztcbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbW92aWVzOiBtb3ZpZXMsXG4gICAgICAgICAgICBzZWFyY2hVc2VyVGV4dDogJycsIFxuICAgICAgICAgICAgYWRkTW92aWVUZXh0OiAnJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlID0gdGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZS5iaW5kKHRoaXMpXG4gICAgICAgIHRoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXQgPSB0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0LmJpbmQodGhpcylcbiAgICAgICAgLy9jYW4gYmluZCBpbiBjb25zdHJ1Y3RvciBvciBiZWxvdyBpbiByZW5kZXJcbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzZWFyY2hVc2VyVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG4gICAgfVxuICAgIGhhbmRsZUFkZE1vdmllQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAvL2NvbnNvbGUubG9nKHRoaXMpXG4gICAgICB0aGlzLnNldFN0YXRlKHthZGRNb3ZpZVRleHQ6IGV2ZW50LnRhcmdldC52YWx1ZX0pO1xuICAgIH1cbiAgICBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCgpe1xuICAgICAgLy9zdGF0ZSBpcyBjdXJyZW50bHkgbnVsbCBuZWVkIHRvIGZpeFxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnN0YXRlLmFkZE1vdmllVGV4dClcbiAgICAgIHRoaXMuc2V0U3RhdGUoe21vdmllczogcmVzdWx0c30pXG4gICAgfVxuICBoYW5kbGVTdWJtaXRTZWFyY2goKSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLm1vdmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudE1vdmllID0gdGhpcy5zdGF0ZS5tb3ZpZXNbaV07XG4gICAgICBpZiAoY3VycmVudE1vdmllLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5zdGF0ZS5zZWFyY2hVc2VyVGV4dC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goY3VycmVudE1vdmllKTtcbiAgICAgIH0gXG4gICAgfVxuICAgIGlmICghcmVzdWx0cykge1xuICAgICAgYWxlcnQoJ1NvcnJ5LCB0aXRsZSBub3QgZm91bmQnKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe21vdmllczogbW92aWVzfSk7IFxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHttb3ZpZXM6IHJlc3VsdHN9KTtcbiAgfVxuLypcbnNldCBhIHZhcmlhYmxlIGZvciBmb3VuZCBtb3ZpZXNcbmlmIHRoZSB0ZXh0IGJveCB2YWx1ZSB0aGF0IHRoZSB1c2VyIHN1Ym1pdHMgaXMgaW5jbHVkZWQgaW4gdGhlIG1vdmllIGxpc3QsIHJldHVybiB0aGUgbGlzdCB3aXRoIHRoZSB0aXR0bGVzIG1hdGNoaW5nXG4qL1xuICBcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxoMT5Nb3ZpZSBMaXN0PC9oMT5cbiAgICAgICAgICAgICAgICA8QWRkTW92aWUgYWRkTW92aWVUZXh0ID0ge3RoaXMuc3RhdGUuYWRkTW92aWVUZXh0fSBoYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHt0aGlzLmhhbmRsZUFkZE1vdmllU3VibWl0fSBoYW5kbGVBZGRNb3ZpZUNoYW5nZSA9e3RoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2V9PjwvQWRkTW92aWU+XG4gICAgICAgICAgICAgICAgPFNlYXJjaEJhciBzZWFyY2hVc2VyVGV4dCA9IHt0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0fSBoYW5kbGVTdWJtaXRTZWFyY2ggPSB7dGhpcy5oYW5kbGVTdWJtaXRTZWFyY2guYmluZCh0aGlzKX0gaGFuZGxlQ2hhbmdlID0ge3RoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyl9Lz5cbiAgICAgICAgICAgICAgICA8TW92aWVMaXN0IG1vdmllcyA9IHt0aGlzLnN0YXRlLm1vdmllc30vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbi8vaWYgaXQgaXMgYSBtZXRob2Qgb24gdGhpcywgdGhlbiB0aGUgc2VhcmNoIGlzIHRoZSBjb21wb25lbnQsIHRoaXMgaXMgdGhlIGFwcCBjb21wb25lbWVudCAiXX0=