
/*
where components start
constructor sets up app with whatever props are passed down
state goes inside constructor
constructor/super - if you pass props inside construtor call, it passes it down to the next componenents 
this.state = object always with key val pair
more than 1 line of code use parentheses for jsx ex/. line 21
movies can also write as movies: movies 
 
*/

import movies from '../movieData.js';
import MovieList from './MovieList.js';
import SearchBar from './SearchBar.js';
import AddMovie from './AddMovie.js';
class App extends React.Component {
  constructor(props) {
    // props what you pass in from the parent componement (index.js)
    super(props);
    this.state = {
      movies: movies,
      searchUserText: '',
      addMovieText: ''
    };
    console.log(this);
    this.handleAddMovieChange = this.handleAddMovieChange.bind(this);
    this.handleAddMovieSubmit = this.handleAddMovieSubmit.bind(this);
    //can bind in constructor or below in render
  }
  handleChange(event) {
    this.setState({ searchUserText: event.target.value });
  }
  handleAddMovieChange(event) {
    //console.log(this)
    this.setState({ addMovieText: event.target.value });
  }
  handleAddMovieSubmit() {
    //state is currently null need to fix
    var results = [];
    results.push(this.state.addMovieText);
    this.setState({ movies: results });
  }
  handleSubmitSearch() {
    //console.log(this)

    var results = [];
    for (var i = 0; i < this.state.movies.length; i++) {
      var currentMovie = this.state.movies[i];
      if (currentMovie.title.toLowerCase().includes(this.state.searchUserText.toLowerCase())) {
        results.push(currentMovie);
      }
    }
    if (!results) {
      alert('Sorry, title not found');
      return this.setState({ movies: movies });
    }
    this.setState({ movies: results });
  }
  /*
  set a variable for found movies
  if the text box value that the user submits is included in the movie list, return the list with the tittles matching
  */

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'Movie List'
      ),
      React.createElement(AddMovie, { addMovieText: this.state.addMovieText, handleAddMovieSubmit: this.handleAddMovieSubmit, handleAddMovieChange: this.handleAddMovieChange }),
      React.createElement(SearchBar, { searchUserText: this.state.searchUserText, handleSubmitSearch: this.handleSubmitSearch.bind(this), handleChange: this.handleChange.bind(this) }),
      React.createElement(MovieList, { movies: this.state.movies })
    );
  }
}

export default App;
//if it is a method on this, then the search is the component, this is the app componement
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsibW92aWVzIiwiTW92aWVMaXN0IiwiU2VhcmNoQmFyIiwiQWRkTW92aWUiLCJBcHAiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlYXJjaFVzZXJUZXh0IiwiYWRkTW92aWVUZXh0IiwiY29uc29sZSIsImxvZyIsImhhbmRsZUFkZE1vdmllQ2hhbmdlIiwiYmluZCIsImhhbmRsZUFkZE1vdmllU3VibWl0IiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJzZXRTdGF0ZSIsInRhcmdldCIsInZhbHVlIiwicmVzdWx0cyIsInB1c2giLCJoYW5kbGVTdWJtaXRTZWFyY2giLCJpIiwibGVuZ3RoIiwiY3VycmVudE1vdmllIiwidGl0bGUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiYWxlcnQiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7Ozs7Ozs7QUFXQSxPQUFPQSxNQUFQLE1BQW1CLGlCQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixnQkFBdEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGVBQXJCO0FBQ0EsTUFBTUMsR0FBTixTQUFrQkMsTUFBTUMsU0FBeEIsQ0FBa0M7QUFDOUJDLGNBQVlDLEtBQVosRUFBbUI7QUFBQztBQUNoQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1RULGNBQVFBLE1BREM7QUFFVFUsc0JBQWdCLEVBRlA7QUFHVEMsb0JBQWM7QUFITCxLQUFiO0FBS0FDLFlBQVFDLEdBQVIsQ0FBWSxJQUFaO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBS0Esb0JBQUwsQ0FBMEJDLElBQTFCLENBQStCLElBQS9CLENBQTVCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBS0Esb0JBQUwsQ0FBMEJELElBQTFCLENBQStCLElBQS9CLENBQTVCO0FBQ0E7QUFDSDtBQUNERSxlQUFhQyxLQUFiLEVBQW9CO0FBQ2xCLFNBQUtDLFFBQUwsQ0FBYyxFQUFDVCxnQkFBZ0JRLE1BQU1FLE1BQU4sQ0FBYUMsS0FBOUIsRUFBZDtBQUNEO0FBQ0RQLHVCQUFxQkksS0FBckIsRUFBNEI7QUFDMUI7QUFDQSxTQUFLQyxRQUFMLENBQWMsRUFBQ1IsY0FBY08sTUFBTUUsTUFBTixDQUFhQyxLQUE1QixFQUFkO0FBQ0Q7QUFDREwseUJBQXNCO0FBQ3BCO0FBQ0EsUUFBSU0sVUFBVSxFQUFkO0FBQ0FBLFlBQVFDLElBQVIsQ0FBYSxLQUFLZCxLQUFMLENBQVdFLFlBQXhCO0FBQ0EsU0FBS1EsUUFBTCxDQUFjLEVBQUNuQixRQUFRc0IsT0FBVCxFQUFkO0FBQ0Q7QUFDSEUsdUJBQXFCO0FBQ25COztBQUVFLFFBQUlGLFVBQVUsRUFBZDtBQUNBLFNBQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtoQixLQUFMLENBQVdULE1BQVgsQ0FBa0IwQixNQUF0QyxFQUE4Q0QsR0FBOUMsRUFBbUQ7QUFDakQsVUFBSUUsZUFBZSxLQUFLbEIsS0FBTCxDQUFXVCxNQUFYLENBQWtCeUIsQ0FBbEIsQ0FBbkI7QUFDRixVQUFJRSxhQUFhQyxLQUFiLENBQW1CQyxXQUFuQixHQUFpQ0MsUUFBakMsQ0FBMEMsS0FBS3JCLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQm1CLFdBQTFCLEVBQTFDLENBQUosRUFBd0Y7QUFDdEZQLGdCQUFRQyxJQUFSLENBQWFJLFlBQWI7QUFDRDtBQUNGO0FBQ0QsUUFBSSxDQUFDTCxPQUFMLEVBQWM7QUFDWlMsWUFBTSx3QkFBTjtBQUNBLGFBQU8sS0FBS1osUUFBTCxDQUFjLEVBQUNuQixRQUFRQSxNQUFULEVBQWQsQ0FBUDtBQUNEO0FBQ0QsU0FBS21CLFFBQUwsQ0FBYyxFQUFDbkIsUUFBUXNCLE9BQVQsRUFBZDtBQUNEO0FBQ0g7Ozs7O0FBS0lVLFdBQVM7QUFDTCxXQUNJO0FBQUE7QUFBQTtBQUNJO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FESjtBQUVJLDBCQUFDLFFBQUQsSUFBVSxjQUFnQixLQUFLdkIsS0FBTCxDQUFXRSxZQUFyQyxFQUFtRCxzQkFBd0IsS0FBS0ssb0JBQWhGLEVBQXNHLHNCQUF1QixLQUFLRixvQkFBbEksR0FGSjtBQUdJLDBCQUFDLFNBQUQsSUFBVyxnQkFBa0IsS0FBS0wsS0FBTCxDQUFXQyxjQUF4QyxFQUF3RCxvQkFBc0IsS0FBS2Msa0JBQUwsQ0FBd0JULElBQXhCLENBQTZCLElBQTdCLENBQTlFLEVBQWtILGNBQWdCLEtBQUtFLFlBQUwsQ0FBa0JGLElBQWxCLENBQXVCLElBQXZCLENBQWxJLEdBSEo7QUFJSSwwQkFBQyxTQUFELElBQVcsUUFBVSxLQUFLTixLQUFMLENBQVdULE1BQWhDO0FBSkosS0FESjtBQVFIO0FBeEQ2Qjs7QUEyRGxDLGVBQWVJLEdBQWY7QUFDQSIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG53aGVyZSBjb21wb25lbnRzIHN0YXJ0XG5jb25zdHJ1Y3RvciBzZXRzIHVwIGFwcCB3aXRoIHdoYXRldmVyIHByb3BzIGFyZSBwYXNzZWQgZG93blxuc3RhdGUgZ29lcyBpbnNpZGUgY29uc3RydWN0b3JcbmNvbnN0cnVjdG9yL3N1cGVyIC0gaWYgeW91IHBhc3MgcHJvcHMgaW5zaWRlIGNvbnN0cnV0b3IgY2FsbCwgaXQgcGFzc2VzIGl0IGRvd24gdG8gdGhlIG5leHQgY29tcG9uZW5lbnRzIFxudGhpcy5zdGF0ZSA9IG9iamVjdCBhbHdheXMgd2l0aCBrZXkgdmFsIHBhaXJcbm1vcmUgdGhhbiAxIGxpbmUgb2YgY29kZSB1c2UgcGFyZW50aGVzZXMgZm9yIGpzeCBleC8uIGxpbmUgMjFcbm1vdmllcyBjYW4gYWxzbyB3cml0ZSBhcyBtb3ZpZXM6IG1vdmllcyBcbiBcbiovXG5cbmltcG9ydCBtb3ZpZXMgZnJvbSAnLi4vbW92aWVEYXRhLmpzJztcbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSAnLi9Nb3ZpZUxpc3QuanMnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL1NlYXJjaEJhci5qcyc7XG5pbXBvcnQgQWRkTW92aWUgZnJvbSAnLi9BZGRNb3ZpZS5qcyc7XG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7Ly8gcHJvcHMgd2hhdCB5b3UgcGFzcyBpbiBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW1lbnQgKGluZGV4LmpzKVxuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBtb3ZpZXM6IG1vdmllcyxcbiAgICAgICAgICAgIHNlYXJjaFVzZXJUZXh0OiAnJywgXG4gICAgICAgICAgICBhZGRNb3ZpZVRleHQ6ICcnXG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpXG4gICAgICAgIHRoaXMuaGFuZGxlQWRkTW92aWVDaGFuZ2UgPSB0aGlzLmhhbmRsZUFkZE1vdmllQ2hhbmdlLmJpbmQodGhpcylcbiAgICAgICAgdGhpcy5oYW5kbGVBZGRNb3ZpZVN1Ym1pdCA9IHRoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXQuYmluZCh0aGlzKVxuICAgICAgICAvL2NhbiBiaW5kIGluIGNvbnN0cnVjdG9yIG9yIGJlbG93IGluIHJlbmRlclxuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3NlYXJjaFVzZXJUZXh0OiBldmVudC50YXJnZXQudmFsdWV9KTtcbiAgICB9XG4gICAgaGFuZGxlQWRkTW92aWVDaGFuZ2UoZXZlbnQpIHtcbiAgICAgIC8vY29uc29sZS5sb2codGhpcylcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2FkZE1vdmllVGV4dDogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG4gICAgfVxuICAgIGhhbmRsZUFkZE1vdmllU3VibWl0KCl7XG4gICAgICAvL3N0YXRlIGlzIGN1cnJlbnRseSBudWxsIG5lZWQgdG8gZml4XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc3RhdGUuYWRkTW92aWVUZXh0KVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7bW92aWVzOiByZXN1bHRzfSlcbiAgICB9XG4gIGhhbmRsZVN1Ym1pdFNlYXJjaCgpIHtcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMpXG5cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhdGUubW92aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50TW92aWUgPSB0aGlzLnN0YXRlLm1vdmllc1tpXTtcbiAgICAgIGlmIChjdXJyZW50TW92aWUudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnN0YXRlLnNlYXJjaFVzZXJUZXh0LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChjdXJyZW50TW92aWUpO1xuICAgICAgfSBcbiAgICB9XG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICBhbGVydCgnU29ycnksIHRpdGxlIG5vdCBmb3VuZCcpXG4gICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7bW92aWVzOiBtb3ZpZXN9KTsgXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe21vdmllczogcmVzdWx0c30pO1xuICB9XG4vKlxuc2V0IGEgdmFyaWFibGUgZm9yIGZvdW5kIG1vdmllc1xuaWYgdGhlIHRleHQgYm94IHZhbHVlIHRoYXQgdGhlIHVzZXIgc3VibWl0cyBpcyBpbmNsdWRlZCBpbiB0aGUgbW92aWUgbGlzdCwgcmV0dXJuIHRoZSBsaXN0IHdpdGggdGhlIHRpdHRsZXMgbWF0Y2hpbmdcbiovXG4gIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPk1vdmllIExpc3Q8L2gxPlxuICAgICAgICAgICAgICAgIDxBZGRNb3ZpZSBhZGRNb3ZpZVRleHQgPSB7dGhpcy5zdGF0ZS5hZGRNb3ZpZVRleHR9IGhhbmRsZUFkZE1vdmllU3VibWl0ID0ge3RoaXMuaGFuZGxlQWRkTW92aWVTdWJtaXR9IGhhbmRsZUFkZE1vdmllQ2hhbmdlID17dGhpcy5oYW5kbGVBZGRNb3ZpZUNoYW5nZX0+PC9BZGRNb3ZpZT5cbiAgICAgICAgICAgICAgICA8U2VhcmNoQmFyIHNlYXJjaFVzZXJUZXh0ID0ge3RoaXMuc3RhdGUuc2VhcmNoVXNlclRleHR9IGhhbmRsZVN1Ym1pdFNlYXJjaCA9IHt0aGlzLmhhbmRsZVN1Ym1pdFNlYXJjaC5iaW5kKHRoaXMpfSBoYW5kbGVDaGFuZ2UgPSB7dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX0vPlxuICAgICAgICAgICAgICAgIDxNb3ZpZUxpc3QgbW92aWVzID0ge3RoaXMuc3RhdGUubW92aWVzfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuLy9pZiBpdCBpcyBhIG1ldGhvZCBvbiB0aGlzLCB0aGVuIHRoZSBzZWFyY2ggaXMgdGhlIGNvbXBvbmVudCwgdGhpcyBpcyB0aGUgYXBwIGNvbXBvbmVtZW50ICJdfQ==